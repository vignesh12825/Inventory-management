{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/vicky/I2I projects/Inventory management/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const queryClient = useQueryClient();\n  const {\n    data: user,\n    isLoading,\n    refetch\n  } = useQuery(['currentUser', localStorage.getItem('access_token')], apiService.users.getCurrentUser, {\n    retry: false,\n    enabled: !!localStorage.getItem('access_token'),\n    onSuccess: data => {\n      console.log('AuthContext: User data received successfully:', data.username);\n      setIsAuthenticated(true);\n    },\n    onError: error => {\n      var _error$response;\n      console.error('AuthContext error:', error);\n      console.error('AuthContext error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setIsAuthenticated(false);\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n    }\n  });\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      console.log('Token found in localStorage, setting authenticated state');\n      setIsAuthenticated(true);\n    } else {\n      console.log('No token found in localStorage');\n    }\n  }, []);\n  const login = (token, userData) => {\n    // Clear any cached user data before setting new user\n    queryClient.removeQueries(['currentUser']);\n    localStorage.setItem('access_token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n  };\n  const logout = () => {\n    // Clear cached user data on logout\n    queryClient.removeQueries(['currentUser']);\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n  const refetchUser = () => {\n    // Clear cache and refetch fresh data\n    queryClient.removeQueries(['currentUser']);\n    refetch();\n  };\n  const value = {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    refetchUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"m38RUQrw1FcjxBIv2fDh/d2LZPY=\", false, function () {\n  return [useQueryClient, useQuery];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQuery","useQueryClient","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","queryClient","data","user","isLoading","refetch","localStorage","getItem","users","getCurrentUser","retry","enabled","onSuccess","console","log","username","onError","error","_error$response","response","removeItem","token","login","userData","removeQueries","setItem","JSON","stringify","logout","window","location","href","refetchUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/ubuntu/vicky/I2I projects/Inventory management/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport apiService from '../services/api';\nimport { UserWithPermissions } from '../types';\n\ninterface AuthContextType {\n  user: UserWithPermissions | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (token: string, userData: UserWithPermissions) => void;\n  logout: () => void;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, refetch } = useQuery(\n    ['currentUser', localStorage.getItem('access_token')],\n    apiService.users.getCurrentUser,\n    {\n      retry: false,\n      enabled: !!localStorage.getItem('access_token'),\n      onSuccess: (data) => {\n        console.log('AuthContext: User data received successfully:', data.username);\n        setIsAuthenticated(true);\n      },\n      onError: (error) => {\n        console.error('AuthContext error:', error);\n        console.error('AuthContext error details:', error.response?.data);\n        setIsAuthenticated(false);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user');\n      },\n    }\n  );\n\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      console.log('Token found in localStorage, setting authenticated state');\n      setIsAuthenticated(true);\n    } else {\n      console.log('No token found in localStorage');\n    }\n  }, []);\n\n  const login = (token: string, userData: UserWithPermissions) => {\n    // Clear any cached user data before setting new user\n    queryClient.removeQueries(['currentUser']);\n    localStorage.setItem('access_token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n  };\n\n  const logout = () => {\n    // Clear cached user data on logout\n    queryClient.removeQueries(['currentUser']);\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n\n  const refetchUser = () => {\n    // Clear cache and refetch fresh data\n    queryClient.removeQueries(['currentUser']);\n    refetch();\n  };\n\n  const value: AuthContextType = {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    refetchUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}