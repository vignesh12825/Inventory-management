{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/vicky/I2I projects/Inventory management/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const queryClient = useQueryClient();\n  const {\n    data: user,\n    isLoading,\n    refetch\n  } = useQuery(['currentUser'], apiService.users.getCurrentUser, {\n    retry: false,\n    enabled: isAuthenticated && !!localStorage.getItem('access_token'),\n    onSuccess: () => {\n      setIsAuthenticated(true);\n    },\n    onError: () => {\n      setIsAuthenticated(false);\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n    }\n  });\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = (token, userData) => {\n    // Clear any cached user data before setting new user\n    queryClient.removeQueries(['currentUser']);\n    localStorage.setItem('access_token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n  const refetchUser = () => {\n    refetch();\n  };\n  const value = {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    refetchUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"m38RUQrw1FcjxBIv2fDh/d2LZPY=\", false, function () {\n  return [useQueryClient, useQuery];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQuery","useQueryClient","apiService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","queryClient","data","user","isLoading","refetch","users","getCurrentUser","retry","enabled","localStorage","getItem","onSuccess","onError","removeItem","token","login","userData","removeQueries","setItem","JSON","stringify","logout","window","location","href","refetchUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/ubuntu/vicky/I2I projects/Inventory management/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport apiService from '../services/api';\nimport { UserWithPermissions } from '../types';\n\ninterface AuthContextType {\n  user: UserWithPermissions | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (token: string, userData: UserWithPermissions) => void;\n  logout: () => void;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, refetch } = useQuery(\n    ['currentUser'],\n    apiService.users.getCurrentUser,\n    {\n      retry: false,\n      enabled: isAuthenticated && !!localStorage.getItem('access_token'),\n      onSuccess: () => {\n        setIsAuthenticated(true);\n      },\n      onError: () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user');\n      },\n    }\n  );\n\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = (token: string, userData: UserWithPermissions) => {\n    // Clear any cached user data before setting new user\n    queryClient.removeQueries(['currentUser']);\n    localStorage.setItem('access_token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    window.location.href = '/login';\n  };\n\n  const refetchUser = () => {\n    refetch();\n  };\n\n  const value: AuthContextType = {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    refetchUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}