{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/vicky/I2I projects/Inventory management/frontend/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery } from 'react-query';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [activeAlertsCount, setActiveAlertsCount] = useState(0);\n  const [unreadAlertsCount, setUnreadAlertsCount] = useState(0);\n\n  // Fetch active alerts count\n  const {\n    data: activeAlertsData,\n    refetch: refreshAlerts\n  } = useQuery(['active-alerts-count'], () => apiService.stockAlerts.getActiveAlerts(), {\n    refetchInterval: 30000,\n    // Refetch every 30 seconds\n    onSuccess: data => {\n      setActiveAlertsCount((data === null || data === void 0 ? void 0 : data.length) || 0);\n      setUnreadAlertsCount((data === null || data === void 0 ? void 0 : data.length) || 0);\n    }\n  });\n\n  // Listen for WebSocket notifications\n  useEffect(() => {\n    const handleStockAlert = event => {\n      const alertData = event.detail;\n      console.log('Received stock alert via WebSocket:', alertData);\n\n      // Increment the count for new alerts\n      setActiveAlertsCount(prev => prev + 1);\n      setUnreadAlertsCount(prev => prev + 1);\n\n      // Refresh the alerts data\n      refreshAlerts();\n    };\n    const handleAlertResolved = event => {\n      const alertData = event.detail;\n      console.log('Alert resolved via WebSocket:', alertData);\n\n      // Decrement the count for resolved alerts\n      setActiveAlertsCount(prev => Math.max(0, prev - 1));\n      setUnreadAlertsCount(prev => Math.max(0, prev - 1));\n\n      // Refresh the alerts data\n      refreshAlerts();\n    };\n\n    // Add event listeners\n    window.addEventListener('stockAlert', handleStockAlert);\n    window.addEventListener('alertResolved', handleAlertResolved);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('stockAlert', handleStockAlert);\n      window.removeEventListener('alertResolved', handleAlertResolved);\n    };\n  }, [refreshAlerts]);\n  const value = {\n    activeAlertsCount,\n    unreadAlertsCount,\n    refreshAlerts\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"PE6VBk5BRmHeIH0XGYTBOjNtH2k=\", false, function () {\n  return [useQuery];\n});\n_c = NotificationProvider;\nexport const useNotifications = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQuery","apiService","jsxDEV","_jsxDEV","NotificationContext","undefined","NotificationProvider","children","_s","activeAlertsCount","setActiveAlertsCount","unreadAlertsCount","setUnreadAlertsCount","data","activeAlertsData","refetch","refreshAlerts","stockAlerts","getActiveAlerts","refetchInterval","onSuccess","length","handleStockAlert","event","alertData","detail","console","log","prev","handleAlertResolved","Math","max","window","addEventListener","removeEventListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotifications","_s2","context","Error","$RefreshReg$"],"sources":["/home/ubuntu/vicky/I2I projects/Inventory management/frontend/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery } from 'react-query';\nimport apiService from '../services/api';\n\ninterface NotificationContextType {\n  activeAlertsCount: number;\n  unreadAlertsCount: number;\n  refreshAlerts: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [activeAlertsCount, setActiveAlertsCount] = useState(0);\n  const [unreadAlertsCount, setUnreadAlertsCount] = useState(0);\n\n  // Fetch active alerts count\n  const { data: activeAlertsData, refetch: refreshAlerts } = useQuery(\n    ['active-alerts-count'],\n    () => apiService.stockAlerts.getActiveAlerts(),\n    {\n      refetchInterval: 30000, // Refetch every 30 seconds\n      onSuccess: (data) => {\n        setActiveAlertsCount(data?.length || 0);\n        setUnreadAlertsCount(data?.length || 0);\n      },\n    }\n  );\n\n  // Listen for WebSocket notifications\n  useEffect(() => {\n    const handleStockAlert = (event: CustomEvent) => {\n      const alertData = event.detail;\n      console.log('Received stock alert via WebSocket:', alertData);\n      \n      // Increment the count for new alerts\n      setActiveAlertsCount(prev => prev + 1);\n      setUnreadAlertsCount(prev => prev + 1);\n      \n      // Refresh the alerts data\n      refreshAlerts();\n    };\n\n    const handleAlertResolved = (event: CustomEvent) => {\n      const alertData = event.detail;\n      console.log('Alert resolved via WebSocket:', alertData);\n      \n      // Decrement the count for resolved alerts\n      setActiveAlertsCount(prev => Math.max(0, prev - 1));\n      setUnreadAlertsCount(prev => Math.max(0, prev - 1));\n      \n      // Refresh the alerts data\n      refreshAlerts();\n    };\n\n    // Add event listeners\n    window.addEventListener('stockAlert', handleStockAlert as EventListener);\n    window.addEventListener('alertResolved', handleAlertResolved as EventListener);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('stockAlert', handleStockAlert as EventListener);\n      window.removeEventListener('alertResolved', handleAlertResolved as EventListener);\n    };\n  }, [refreshAlerts]);\n\n  const value: NotificationContextType = {\n    activeAlertsCount,\n    unreadAlertsCount,\n    refreshAlerts,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}